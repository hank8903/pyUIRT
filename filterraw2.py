#!/usr/bin/env python

import serial
import time
import os



rcvd = [0xBA, 0x09, 0x0C, 0x5A, 0x30, 0x04, 0x42, 0x0C, 0x5D, 0x30, 0x04, 0x3A, 0x04, 0x09, 0x10, 0x0C, 0x91, 0x0C, 0x59, 0x30, 0x04, 0x3F, 0x0C, 0x59, 0x30, 0x04, 0x42, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x09, 0x10, 0x0C, 0x91, 0x04, 0x0B, 0x10, 0x0C, 0x8E, 0x04, 0x07, 0x10, 0x0C, 0x8F, 0x04, 0x09, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x0C, 0x53, 0x30, 0x46, 0xBB, 0x0C, 0x59, 0x30, 0x04, 0x3F, 0x0C, 0x5A, 0x30, 0x04, 0x3A, 0x04, 0x09, 0x10, 0x0C, 0x91, 0x0C, 0x56, 0x30, 0x04, 0x45, 0x0C, 0x54, 0x30, 0x04, 0x44, 0x04, 0x08, 0x10, 0x0C, 0x8E, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x09, 0x10, 0x0C, 0x93, 0x04, 0x08, 0x10, 0x0C, 0x8E, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x09, 0x10, 0x0C, 0x93, 0x0C, 0x54, 0x30, 0x46, 0xB9, 0x0C, 0x5B, 0x30, 0x04, 0x3F, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x0C, 0x56, 0x30, 0x04, 0x42, 0x0C, 0x54, 0x30, 0x04, 0x44, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x07, 0x10, 0x0C, 0x8F, 0x04, 0x0D, 0x10, 0x0C, 0x8A, 0x04, 0x0B, 0x10, 0x0C, 0x91, 0x04, 0x07, 0x10, 0x0C, 0x8F, 0x04, 0x0A, 0x10, 0x0C, 0x8D, 0x0C, 0x57, 0x30, 0x46, 0xB9, 0x0C, 0x57, 0x30, 0x04, 0x3F, 0x0C, 0x56, 0x30, 0x04, 0x45, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x0C, 0x58, 0x30, 0x04, 0x3F, 0x0C, 0x58, 0x30, 0x04, 0x42, 0x04, 0x0A, 0x10, 0x0C, 0x8F, 0x04, 0x08, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x05, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xBB, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x0C, 0x5A, 0x30, 0x04, 0x42, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x0C, 0x58, 0x30, 0x04, 0x3F, 0x0C, 0x55, 0x30, 0x04, 0x44, 0x04, 0x0A, 0x10, 0x0C, 0x8F, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x0A, 0x10, 0x0C, 0x8F, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x0C, 0x55, 0x30, 0x46, 0xBB, 0x0C, 0x53, 0x30, 0x04, 0x46, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x0C, 0x53, 0x30, 0x04, 0x46, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x0C, 0x58, 0x30, 0x46, 0xB6, 0x0C, 0x58, 0x30, 0x04, 0x42, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x0C, 0x58, 0x30, 0x04, 0x41, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x08, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x93, 0x0C, 0x53, 0x30, 0x46, 0xB9, 0x0C, 0x58, 0x30, 0x04, 0x40, 0x0C, 0x58, 0x30, 0x04, 0x44, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x04, 0x03, 0x10, 0x0C, 0x97, 0x04, 0x03, 0x10, 0x0C, 0x93, 0x04, 0x08, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x0C, 0x53, 0x30, 0x46, 0xB9, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x04, 0x08, 0x10, 0x0C, 0x92, 0x04, 0x08, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xBB, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x0C, 0x58, 0x30, 0x04, 0x45, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xBB, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x49, 0x0C, 0x53, 0x30, 0x04, 0x41, 0x04, 0x08, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x93, 0x0C, 0x53, 0x30, 0x46, 0xBE, 0x0C, 0x53, 0x30, 0x04, 0x45, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x0C, 0x58, 0x30, 0x04, 0x44, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x0C, 0x53, 0x30, 0x46, 0xB9, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x04, 0x03, 0x10, 0x0C, 0x92, 0x04, 0x08, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xBB, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x0C, 0x53, 0x30, 0x04, 0x45, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x0C, 0x53, 0x30, 0x04, 0x42, 0x0C, 0x58, 0x30, 0x04, 0x42, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x08, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xB8, 0x0C, 0x53, 0x30, 0x04, 0x46, 0x0C, 0x53, 0x30, 0x04, 0x49, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x0C, 0x4E, 0x30, 0x04, 0x46, 0x0C, 0x53, 0x30, 0x04, 0x49, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xBB, 0x0C, 0x53, 0x30, 0x04, 0x47, 0x0C, 0x4E, 0x30, 0x04, 0x47, 0x04, 0x03, 0x10, 0x0C, 0x99, 0x0C, 0x4E, 0x30, 0x04, 0x49, 0x0C, 0x53, 0x30, 0x04, 0x46, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x98, 0x03, 0xFE, 0x10, 0x0C, 0x99, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x98, 0x0C, 0x4E, 0x30, 0x46, 0xC3, 0x0C, 0x4E, 0x30, 0x04, 0x4A, 0x0C, 0x4E, 0x30, 0x04, 0x49, 0x03, 0xFE, 0x10, 0x0C, 0x99, 0x0C, 0x4E, 0x30, 0x04, 0x4E, 0x0C, 0x4E, 0x30, 0x04, 0x49, 0x03, 0xFE, 0x10, 0x0C, 0x9E, 0x03, 0xF9, 0x10, 0x0C, 0xA0, 0x03, 0xF9, 0x10, 0xFF, 0x09, 0xB2, 0x04, 0x07, 0x10, 0x0C, 0x99, 0x0C, 0x4E, 0x30, 0x04, 0x49, 0x0C, 0x4E, 0x30, 0x04, 0x47, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x96, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x03, 0x10, 0x0C, 0x93, 0x04, 0x03, 0x10, 0x0C, 0x99, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x46, 0xB8, 0x0C, 0x53, 0x30, 0x04, 0x46, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x0C, 0x53, 0x30, 0x04, 0x44, 0x0C, 0x58, 0x30, 0x04, 0x44, 0x04, 0x03, 0x10, 0x0C, 0x94, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x08, 0x10, 0x0C, 0x8E, 0x04, 0x0A, 0x10, 0x0C, 0x91, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x0A, 0x10, 0x0C, 0x8D, 0x0C, 0x57, 0x30, 0x46, 0xB9, 0x0C, 0x58, 0x30, 0x04, 0x41, 0x0C, 0x55, 0x30, 0x04, 0x42, 0x04, 0x0A, 0x10, 0x0C, 0x8F, 0x0C, 0x5D, 0x30, 0x04, 0x3A, 0x0C, 0x57, 0x30, 0x04, 0x42, 0x04, 0x0E, 0x10, 0x0C, 0x89, 0x04, 0x11, 0x10, 0x0C, 0x87, 0x04, 0x10, 0x10, 0x0C, 0x8A, 0x04, 0x08, 0x10, 0x0C, 0x8F, 0x04, 0x10, 0x10, 0x0C, 0x8C, 0x04, 0x06, 0x10, 0x0C, 0x91, 0x0C, 0x56, 0x30, 0x46, 0xB7, 0x0C, 0x5E, 0x30, 0x04, 0x3D, 0x0C, 0x5C, 0x30, 0x04, 0x3B, 0x04, 0x0E, 0x10, 0x0C, 0x8C, 0x0C, 0x5C, 0x30, 0x04, 0x38, 0x0C, 0x59, 0x30, 0x04, 0x42, 0x04, 0x0E, 0x10, 0x0C, 0x8C, 0x04, 0x0E, 0x10, 0x0C, 0x87, 0x04, 0x10, 0x10, 0x0C, 0x8A, 0x04, 0x0E, 0x10, 0x0C, 0x8C, 0x04, 0x0E, 0x10, 0x0C, 0x87, 0x04, 0x10, 0x10, 0x0C, 0x8A, 0x0C, 0x5E, 0x30, 0x46, 0xB1, 0x0C, 0x5D, 0x30, 0x04, 0x38, 0x0C, 0x61, 0x30, 0x04, 0x37, 0x04, 0x13, 0x10, 0x0C, 0x87, 0x0C, 0x5F, 0x30, 0x04, 0x38, 0x0C, 0x61, 0x30, 0x04, 0x37, 0x04, 0x13, 0x10, 0x0C, 0x87, 0x04, 0x10, 0x10, 0x0C, 0x8A, 0x04, 0x09, 0x10, 0x0C, 0x8F, 0x04, 0x09, 0x10, 0x0C, 0x8E, 0x04, 0x10, 0x10, 0x0C, 0x8A, 0x04, 0x0E, 0x10, 0x0C, 0x89, 0x0C, 0x5E, 0x30, 0xFF]




interSpaceGapHigh = ((((rcvd[0] << 8)  * 500) / 512) & 0xff)

interSpaceGapLow = ((((interSpaceGapHigh | rcvd[1]) * 500) / 512) & 0xff)

pulseTimeHigh = rcvd[2]

pulseTimeLow = rcvd[3]

pulseCountLow = rcvd[4]

if not (pulseCountLow & (1 << 7)) == 0:
    pulseCountHigh = rcvd[5]
    spaceTimeHigh = rcvd[6]
    carrierFreq = (((pulseCountHigh << 8) | pulseCountLow) / (((pulseTimeHigh << 8) | pulseTimeLow) * 400.0/1000000000))
    offset = 1
else:
    pulseCountHigh = None
    spaceTimeHigh = rcvd[5]
    carrierFreq = (pulseCountLow / (((pulseTimeHigh << 8) | pulseTimeLow) * 400.0/1000000000))
    offset = 0

spaceTimeLow = rcvd[6+offset]


print "\n\n\t\tUSB-UIRT RAW2 Mode (0x24):"

print "\nReceived Data: \n"

print "B1 0x%02x: interSpaceGapHigh * 50uS = %duS \n" % (interSpaceGapHigh, (interSpaceGapHigh * 50))

print "B2 0x%02x: interSpaceGapLow * 50uS = %duS\n" % (interSpaceGapLow, (interSpaceGapLow * 50))

print "B3 0x%02x: pulseTimeHigh * 400nS = %dnS \n" % (pulseTimeHigh, (pulseTimeHigh * 400))

print "B4 0x%02x: pulseTimeLow * 400nS = %dnS \n" % (pulseTimeLow, (pulseTimeLow * 400))

if pulseCountHigh is not None: 
    print "B6 0x%02x: pulseCountHigh \n" % pulseCountHigh

print "B5 0x%02x: pulseCountLow < 0x80: %s \n" % (pulseCountLow, (pulseCountLow < 0x80))


print "B6/7 0x%02x: spaceTimeHigh * 400nS = %dnS \n" % (spaceTimeHigh, (spaceTimeHigh * 400))
print "B7/8 0x%02x: spaceTimeLow * 400nS = %dnS \n" % (spaceTimeLow, (spaceTimeLow * 400))

print "%f: Carrier Frequency = %dkHz \n" % (carrierFreq, int(round((carrierFreq / 1000))))


print "\nTransmission Data: \n"

print "DOTXRAW = 0x36 + cmdLength + RAWSTRUCT + checksum \n"

payload = [57, 19, 57, 19, 18, 58, 57, 19, 57, 19, 18, 58, 18, 58, 18, 58, 18, 58, 18, 58, 18, 58, 57, 19, 57, 19, 57, 58, 18, 19, 57, 19, 57, 58, 18, 58, 18, 58, 18, 58, 18, 58, 18, 58, 18, 19, 57, 19, 57, 58, 57, 19, 18, 19, 57, 58, 57, 58, 18, 58, 18, 58, 18, 58, 18, 58, 18, 19, 18, 19, 57, 58, 57, 19, 57, 19, 18, 58, 57, 58, 57, 58, 18, 58, 18, 58, 18, 58, 18, 19, 18, 19, 18, 58, 57, 19, 57, 19, 57, 58, 18, 58, 57, 58, 57, 58, 18, 58, 18, 58, 18, 19, 18, 19, 18, 58, 18, 19, 57, 19, 57, 58, 57, 58, 18, 58, 57, 58, 57, 58, 18, 58, 18, 19]
txFreq = int(round(carrierFreq / 1000))
repCnt = 0x04
# RAW Byte Count = numBytes that follow this byte in RAWSTRUCT
rawByteCnt = ((len(payload)) & 0xff)

# TODO: Apply compression to RAWSTRUCT timing
# TODO: Pulse Widths and Space Widths need to be converted to units used by DOTXRAW cmd
rawStruct = []
rawStruct.insert(0, txFreq)
rawStruct.insert(1, repCnt)
rawStruct.insert(2, 0xb5)
rawStruct.insert(3, 0xac)
rawStruct.insert(4, rawByteCnt)  # ?
#rawStruct.insert(5, ((pulseTimeLow - pulseTimeHigh) & 0x7F)/2500000)
#rawStruct.insert(6, ((spaceTimeLow - spaceTimeHigh) & 0x7F)/2500000)
rawStruct.extend(payload)

extCmd = 0x36
# Command Length = 1 + len(RAWSTRUCT)
cmdLen = ((len(rawStruct) + 1) & 0xff)
preCmd = []
preCmd.insert(0, extCmd)
preCmd.insert(1, cmdLen)

txRaw = []
txRaw.extend(preCmd)
txRaw.extend(rawStruct)

# Mask the lower 8 bits of the sum
ckSum = ((0x100-(sum(txRaw) & 0xff)) & 0xff) 

txRaw.append(ckSum)

print "0x%02x: DOTXRAW Extended Command \n" % extCmd

print "0x%02x: Command Length \n" % cmdLen

print "RAWSTRUCT: \n"

print "B0 0x%02x: Frequency \n" % txFreq

print "B1 0x%02x: Repeat Count \n" % repCnt

print "B2 0x%02x: Interspace High Byte \n" % interSpaceGapHigh

print "B3 0x%02x: Interspace Low Byte \n" % interSpaceGapLow

print "B4 0x%02x: RAW Byte Count \n" % rawByteCnt

print "B5 0x%02x: First Pulse Width \n" % (pulseTimeHigh + pulseTimeLow)

print "B6 0x%02x: First Space Width \n" % (spaceTimeHigh + spaceTimeLow)

#print "Payload: \n", rcvd[2:-1]

print "\nChecksum: \n"

print "0x%02x: Checksum \n" % ckSum


port = "/dev/tty.usbserial-0000103D"
conn = serial.Serial(port, 312500, rtscts=True, timeout=1, writeTimeout=1)


print ''.join(["%02x" % x for x in rcvd])

chrCmd = ''.join(chr(c) for c in txRaw)
conn.write(chrCmd)
data = conn.read(1)

print "\n\nResponse:"
print "0x%02x" % ord(data)

conn.close()
